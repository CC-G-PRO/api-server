name: Deploy to EC2 With docker compose

on: 
  push:
    branches:
      - main #main push 가 발생할 때 

jobs:
  deploy: 
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory : ./packer
    steps:
    - name : Checkout source
      uses : actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Setup Packer
      uses: hashicorp/setup-packer@v2
      with:
        version: 1.9.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Build EC2 with Packer (create AMI)
      run: |
        packer init .
        packer build ec2.pkr.hcl

    - name: Update Launch Template with new AMI
      id: update_lt
      run: |
        AMI_ID=$(aws ec2 describe-images --owners self --query 'Images[*].{ID:ImageId,Time:CreationDate}' --output json | jq -r 'sort_by(.Time) | reverse | .[0].ID')
        LATEST_VERSION=$(aws ec2 describe-launch-templates --launch-template-names api-server-templete --query "LaunchTemplates[0].LatestVersionNumber" --output text)
    
        aws ec2 create-launch-template-version \
        --launch-template-name api-server-templete \
        --source-version $LATEST_VERSION \
        --version-description "Deploy from GitHub Actions" \
        --launch-template-data "{
          \"ImageId\":\"$AMI_ID\",
          \"KeyName\": \"spring-server\",
          \"IamInstanceProfile\": { \"Name\": \"secret-role\" },
        }"
    
        NEW_VERSION=$(aws ec2 describe-launch-template-versions \
          --launch-template-name api-server-templete \
          --query "LaunchTemplateVersions[?VersionDescription=='Deploy from GitHub Actions'].VersionNumber | [0]" \
          --output text)
    
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT


    - name: Update Auto Scaling Group to use latest Launch Template
      run: |
          echo "Using Launch Template version: ${{ steps.update_lt.outputs.new_version }}"
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name asg-api-server \
            --launch-template "LaunchTemplateName=api-server-templete,Version=${{steps.update_lt.outputs.new_version}}"

    - name: Start instance refresh for ASG
      run: |
        aws autoscaling start-instance-refresh \
          --auto-scaling-group-name asg-api-server \
          --strategy Rolling



